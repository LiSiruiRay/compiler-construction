

start of type_infererence: 
type_env: []
e_first: ((fn y (let x = (fn z y) in (pair ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 ))))) (fn x x))
e: ((fn y (let x = (fn z y) in (pair ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 ))))) (fn x x))



 -- case: App (e1, e2), 
e1: (fn y (let x = (fn z y) in (pair ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 )))))
e2: (fn x x)


start of type_infererence: 
type_env: []
e_first: (fn y (let x = (fn z y) in (pair ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 )))))
e: (fn y (let x = (fn z y) in (pair ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 )))))



 -- case: Fn (x, body), argument (x): y, body: (let x = (fn z y) in (pair ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 ))))
arg_type: (Guess)
checking new_env: [y : (Guess)]


start of type_infererence: 
type_env: [y : (Guess)]
e_first: (let x = (fn z y) in (pair ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 ))))
e: (let x = (fn z y) in (pair ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 ))))



 -- case: Let (x, e1, e2), x: x, 
e1: (fn z y), 
e2: (pair ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 )))


start of type_infererence: 
type_env: [y : (Guess)]
e_first: (fn z y)
e: (fn z y)



 -- case: Fn (x, body), argument (x): z, body: y
arg_type: (Guess)
checking new_env: [z : (Guess); y : (Guess)]


start of type_infererence: 
type_env: [z : (Guess); y : (Guess)]
e_first: y
e: y



 -- case: | Var x -> 

body_type: (Guess)
end of Fn Case ---- 


 
checking type, t1: ((Guess)) -> ((Guess))
start of guesses_of_tipe: t: ((Guess)) -> ((Guess))
start of guesses_of_tipe: t: (Guess)
start of guesses_of_tipe: t: (Guess)
start of guesses_of_tipe: t: (Guess)
checking tipe_scheme2string, scheme: ('a0) -> ((Guess))
end of let case


start of type_infererence: 
type_env: [x : ('a0) -> ((Guess)); y : (Guess)]
e_first: (pair ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 )))
e: (pair ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 )))



 -- case: | PrimApp (prim, args) -> : 

args before call infer again: ((x (1 )) (1 )); ((x (pair (1 ); (2 ))) (2 ))
before call infer again, prim: pair


start of type_infererence: 
type_env: [x : ('a0) -> ((Guess)); y : (Guess)]
e_first: ((x (1 )) (1 ))
e: ((x (1 )) (1 ))



 -- case: App (e1, e2), 
e1: (x (1 ))
e2: (1 )


start of type_infererence: 
type_env: [x : ('a0) -> ((Guess)); y : (Guess)]
e_first: (x (1 ))
e: (x (1 ))



 -- case: App (e1, e2), 
e1: x
e2: (1 )


start of type_infererence: 
type_env: [x : ('a0) -> ((Guess)); y : (Guess)]
e_first: x
e: x



 -- case: | Var x -> 



start of type_infererence: 
type_env: [x : ('a0) -> ((Guess)); y : (Guess)]
e_first: (1 )
e: (1 )



 -- case: | PrimApp (prim, args) -> : 

args before call infer again: 
before call infer again, prim: 1
after calling: arg_types: 
end of | PrimApp (prim, args) -> 



 case: prim_infer: 1
Arg types: 


start of type_infererence: 
type_env: [x : ('a0) -> ((Guess)); y : (Guess)]
e_first: (1 )
e: (1 )



 -- case: | PrimApp (prim, args) -> : 

args before call infer again: 
before call infer again, prim: 1
after calling: arg_types: 
end of | PrimApp (prim, args) -> 



 case: prim_infer: 1
Arg types: 


start of type_infererence: 
type_env: [x : ('a0) -> ((int) -> ((Guess))); y : (int) -> ((Guess))]
e_first: ((x (pair (1 ); (2 ))) (2 ))
e: ((x (pair (1 ); (2 ))) (2 ))



 -- case: App (e1, e2), 
e1: (x (pair (1 ); (2 )))
e2: (2 )


start of type_infererence: 
type_env: [x : ('a0) -> ((int) -> ((Guess))); y : (int) -> ((Guess))]
e_first: (x (pair (1 ); (2 )))
e: (x (pair (1 ); (2 )))



 -- case: App (e1, e2), 
e1: x
e2: (pair (1 ); (2 ))


start of type_infererence: 
type_env: [x : ('a0) -> ((int) -> ((Guess))); y : (int) -> ((Guess))]
e_first: x
e: x



 -- case: | Var x -> 



start of type_infererence: 
type_env: [x : ('a0) -> ((int) -> ((Guess))); y : (int) -> ((Guess))]
e_first: (pair (1 ); (2 ))
e: (pair (1 ); (2 ))



 -- case: | PrimApp (prim, args) -> : 

args before call infer again: (1 ); (2 )
before call infer again, prim: pair


start of type_infererence: 
type_env: [x : ('a0) -> ((int) -> ((Guess))); y : (int) -> ((Guess))]
e_first: (1 )
e: (1 )



 -- case: | PrimApp (prim, args) -> : 

args before call infer again: 
before call infer again, prim: 1
after calling: arg_types: 
end of | PrimApp (prim, args) -> 



 case: prim_infer: 1
Arg types: 


start of type_infererence: 
type_env: [x : ('a0) -> ((int) -> ((Guess))); y : (int) -> ((Guess))]
e_first: (2 )
e: (2 )



 -- case: | PrimApp (prim, args) -> : 

args before call infer again: 
before call infer again, prim: 2
after calling: arg_types: 
end of | PrimApp (prim, args) -> 



 case: prim_infer: 2
Arg types: 
after calling: arg_types: int; int
end of | PrimApp (prim, args) -> 



 case: prim_infer: pair
Arg types: int, int


start of type_infererence: 
type_env: [x : ('a0) -> ((int) -> ((Guess))); y : (int) -> ((Guess))]
e_first: (2 )
e: (2 )



 -- case: | PrimApp (prim, args) -> : 

args before call infer again: 
before call infer again, prim: 2
after calling: arg_types: 
end of | PrimApp (prim, args) -> 



 case: prim_infer: 2
Arg types: 
after calling: arg_types: (Guess); (Guess)
end of | PrimApp (prim, args) -> 



 case: prim_infer: pair
Arg types: (Guess), (Guess)
body_type: ((Guess)) * ((Guess))
end of Fn Case ---- 


 


start of type_infererence: 
type_env: []
e_first: (fn x x)
e: (fn x x)



 -- case: Fn (x, body), argument (x): x, body: x
arg_type: (Guess)
checking new_env: [x : (Guess)]


start of type_infererence: 
type_env: [x : (Guess)]
e_first: x
e: x



 -- case: | Var x -> 

body_type: (Guess)
end of Fn Case ---- 


 
(int) * (int)