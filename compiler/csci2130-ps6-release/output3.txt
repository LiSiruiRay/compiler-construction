

start of type_infererence: 
type_env: []
e_first: (let comp = (fn f (fn g (fn x (f (g x))))) in ((comp (fn z (2 ))) (fn k (4 ))))
e: (let comp = (fn f (fn g (fn x (f (g x))))) in ((comp (fn z (2 ))) (fn k (4 ))))


start of type_infererence: 
type_env: []
e_first: (fn f (fn g (fn x (f (g x)))))
e: (fn f (fn g (fn x (f (g x)))))


start of type_infererence: 
type_env: [f : (Guess)]
e_first: (fn g (fn x (f (g x))))
e: (fn g (fn x (f (g x))))


start of type_infererence: 
type_env: [g : (Guess); f : (Guess)]
e_first: (fn x (f (g x)))
e: (fn x (f (g x)))


start of type_infererence: 
type_env: [x : (Guess); g : (Guess); f : (Guess)]
e_first: (f (g x))
e: (f (g x))


start of type_infererence: 
type_env: [x : (Guess); g : (Guess); f : (Guess)]
e_first: f
e: f


start of type_infererence: 
type_env: [x : (Guess); g : (Guess); f : (Guess)]
e_first: (g x)
e: (g x)


start of type_infererence: 
type_env: [x : (Guess); g : (Guess); f : (Guess)]
e_first: g
e: g


start of type_infererence: 
type_env: [x : (Guess); g : (Guess); f : (Guess)]
e_first: x
e: x
in the let rec unify: checking type: 
t1: (Guess)
t2: ((Guess)) -> ((Guess))
in the let rec unify: checking type: 
t1: (Guess)
t2: ((Guess)) -> ((Guess))


start of type_infererence: 
type_env: [comp : forall 'a0. (('a0) -> ('a0)) -> ((('a0) -> ('a0)) -> (('a0) -> ('a0)))]
e_first: ((comp (fn z (2 ))) (fn k (4 )))
e: ((comp (fn z (2 ))) (fn k (4 )))


start of type_infererence: 
type_env: [comp : forall 'a0. (('a0) -> ('a0)) -> ((('a0) -> ('a0)) -> (('a0) -> ('a0)))]
e_first: (comp (fn z (2 )))
e: (comp (fn z (2 )))


start of type_infererence: 
type_env: [comp : forall 'a0. (('a0) -> ('a0)) -> ((('a0) -> ('a0)) -> (('a0) -> ('a0)))]
e_first: comp
e: comp


start of type_infererence: 
type_env: [comp : forall 'a0. (('a0) -> ('a0)) -> ((('a0) -> ('a0)) -> (('a0) -> ('a0)))]
e_first: (fn z (2 ))
e: (fn z (2 ))


start of type_infererence: 
type_env: [z : (Guess); comp : forall 'a0. (('a0) -> ('a0)) -> ((('a0) -> ('a0)) -> (('a0) -> ('a0)))]
e_first: (2 )
e: (2 )
in the let rec unify: checking type: 
t1: (((Guess)) -> ((Guess))) -> ((((Guess)) -> ((Guess))) -> (((Guess)) -> ((Guess))))
t2: (((Guess)) -> (int)) -> ((Guess))
in the let rec unify: checking type: 
t1: ((Guess)) -> ((Guess))
t2: ((Guess)) -> (int)
in the let rec unify: checking type: 
t1: (Guess)
t2: (Guess)
in the let rec unify: checking type: 
t1: (Guess)
t2: int
in the let rec unify: checking type: 
t1: (Guess)
t2: int
in the let rec unify: checking type: 
t1: ((int) -> (int)) -> ((int) -> (int))
t2: (Guess)
in the let rec unify: checking type: 
t1: (Guess)
t2: ((int) -> (int)) -> ((int) -> (int))


start of type_infererence: 
type_env: [comp : forall 'a0. (('a0) -> ('a0)) -> ((('a0) -> ('a0)) -> (('a0) -> ('a0)))]
e_first: (fn k (4 ))
e: (fn k (4 ))


start of type_infererence: 
type_env: [k : (Guess); comp : forall 'a0. (('a0) -> ('a0)) -> ((('a0) -> ('a0)) -> (('a0) -> ('a0)))]
e_first: (4 )
e: (4 )
in the let rec unify: checking type: 
t1: ((int) -> (int)) -> ((int) -> (int))
t2: (((Guess)) -> (int)) -> ((Guess))
in the let rec unify: checking type: 
t1: ((int) -> (int)) -> ((int) -> (int))
t2: (((Guess)) -> (int)) -> ((Guess))
in the let rec unify: checking type: 
t1: (int) -> (int)
t2: ((Guess)) -> (int)
in the let rec unify: checking type: 
t1: int
t2: (Guess)
in the let rec unify: checking type: 
t1: int
t2: (Guess)
in the let rec unify: checking type: 
t1: int
t2: (Guess)
in the let rec unify: checking type: 
t1: (Guess)
t2: int
in the let rec unify: checking type: 
t1: int
t2: int
in the let rec unify: checking type: 
t1: (int) -> (int)
t2: (Guess)
in the let rec unify: checking type: 
t1: (Guess)
t2: (int) -> (int)
(int) -> (int)

let eval = fun fx -> (fst fx) (snd fx) in
(eval (fun x -> x + 1, 3), eval (fun x -> isnil x, 3 :: nil))



(eval (fun x -> x + 1, 3), eval (fun x -> isnil x, 3 :: nil))
